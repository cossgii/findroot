generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  loginId          String    @unique @map("login_id")
  email            String
  emailVerified    DateTime? @map("email_verified")
  image            String?
  password         String?
  accounts         Account[]
  following        Follow[]  @relation("Follower")
  followers        Follow[]  @relation("Following")
  likes            Like[]
  receivedMessages Message[] @relation("ReceivedMessages")
  sentMessages     Message[] @relation("SentMessages")
  places           Place[]
  routes           Route[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Place {
  id          String        @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  address     String?
  description String
  link        String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  creatorId   String        @map("creator_id")
  district    String?
  category    PlaceCategory
  likes       Like[]
  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  routes      RoutePlace[]

  @@index([district])
  @@index([creatorId])
  @@index([address])
  @@index([category])
  @@index([district, createdAt])
  @@map("places")
}

model Route {
  id          String       @id @default(cuid())
  name        String
  description String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  creatorId   String       @map("creator_id")
  districtId  String?      @map("district_id")
  likes       Like[]
  places      RoutePlace[]
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([districtId])
  @@index([creatorId])
  @@index([districtId, createdAt])
  @@map("routes")
}

model RoutePlace {
  id      String         @id @default(cuid())
  routeId String         @map("route_id")
  placeId String         @map("place_id")
  order   Int
  label   RouteStopLabel
  place   Place          @relation(fields: [placeId], references: [id], onDelete: Cascade)
  route   Route          @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([routeId])
  @@index([placeId])
  @@map("route_places")
}

model Follow {
  followerId  String @map("follower_id")
  followingId String @map("following_id")
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  placeId   String?  @map("place_id")
  routeId   String?  @map("route_id")
  place     Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  route     Route?   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
  @@unique([userId, routeId])
  @@index([placeId])
  @@index([routeId])
  @@index([userId])
  @@map("likes")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  isRead     Boolean  @default(false) @map("is_read")
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

model PasswordResetToken {
  id              String   @id @default(cuid())
  email           String
  selector        String   @unique
  hashedValidator String   @map("hashed_validator")
  expires         DateTime
  createdAt       DateTime @default(now()) @map("created_at")

  @@unique([selector, hashedValidator])
  @@map("password_reset_tokens")
}

enum PlaceCategory {
  MEAL
  DRINK
}

enum RouteStopLabel {
  MEAL
  CAFE
  BAR
}
