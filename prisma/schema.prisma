generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  accounts         Account[]
  following        Follow[]  @relation("Follower")
  followers        Follow[]  @relation("Following")
  likes            Like[]
  receivedMessages Message[] @relation("ReceivedMessages")
  sentMessages     Message[] @relation("SentMessages")
  places           Place[]
  routes           Route[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id          String        @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  address     String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String
  district    String?
  category    PlaceCategory
  likes       Like[]
  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  routes      RoutePlace[]

  @@index([district])
}

model Route {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  districtId  String?
  likes       Like[]
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  places      RoutePlace[]

  @@index([districtId])
}

model RoutePlace {
  id      String         @id @default(cuid())
  routeId String
  placeId String
  order   Int
  label   RouteStopLabel
  place   Place          @relation(fields: [placeId], references: [id], onDelete: Cascade)
  route   Route          @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([routeId])
  @@index([placeId])
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  placeId   String?
  routeId   String?
  place     Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  route     Route?   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
  @@unique([userId, routeId])
  @@index([placeId])
  @@index([routeId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

enum PlaceCategory {
  MEAL
  DRINK
}

enum RouteStopLabel {
  MEAL
  CAFE
  BAR
}
