// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for simple Place categorization
enum PlaceCategory {
  MEAL
  DRINK
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]

  // User's created content
  places    Place[]
  routes    Route[]

  // Social features
  followers Follow[] @relation("Following")
  following Follow[] @relation("Follower")
  likes     Like[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id          String    @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  address     String?
  district    String?
  description String?
  category    PlaceCategory // Changed from String? to the new Enum
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  likes    Like[]

  // Back-relations to routes where this place is used
  routesAsRound1 Route[] @relation("RouteAsRound1")
  routesAsRound2 Route[] @relation("RouteAsRound2")
  routesAsCafe   Route[] @relation("RouteAsCafe")
}

model Route {
  id          String       @id @default(cuid())
  name        String
  description String?
  districtId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  likes    Like[]

  // --- New 3-Slot Structure ---
  placeForRound1Id String?
  placeForRound2Id String?
  placeForCafeId   String?

  placeForRound1 Place? @relation("RouteAsRound1", fields: [placeForRound1Id], references: [id], onDelete: SetNull)
  placeForRound2 Place? @relation("RouteAsRound2", fields: [placeForRound2Id], references: [id], onDelete: SetNull)
  placeForCafe   Place? @relation("RouteAsCafe",   fields: [placeForCafeId],   references: [id], onDelete: SetNull)
}

// The RoutePlace model is now deleted.

model Follow {
  followerId  String
  followingId String

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  place   Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String?

  route   Route?  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId String?

  @@unique([userId, placeId])
  @@unique([userId, routeId])
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  createdAt   DateTime  @default(now())
  isRead      Boolean   @default(false)

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

